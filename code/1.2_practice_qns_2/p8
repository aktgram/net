system calls in C for socket programming



1. Socket Creation

eg: int sock = socket(domain, type, protocol)

sockfd: socket descriptor, an integer (like a file-handle)
domain: integer, specifies communication domain. We use AF_ LOCAL as defined in the POSIX standard for communication between processes on the same host. For communicating between processes on different hosts connected by IPV4, we use AF_INET and AF_I NET 6 for processes connected by IPV6.
type: communication type
SOCK_STREAM: TCP(reliable, connection oriented)
SOCK_DGRAM: UDP(unreliable, connectionless)
protocol: Protocol value for Internet Protocol(IP), which is 0. This is the same number which appears on protocol field in the IP header of a packet.(man protocols for more details)

2. Binding

int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)


After creation of the socket, bind function binds the socket to the address and port number specified in addr(custom data structure). In the example code, we bind the server to the localhost, hence we use INADDR_ANY to specify the IP address.

3. Accept

eg  int new_socket= accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)

It extracts the first connection request on the queue of pending connections for the listening socket, sockfd, creates a new connected socket, and returns a new file descriptor referring to that socket. At this point, connection is established between client and server, and they are ready to transfer data.



For Client connection

4. connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen)

The connect() system call connects the socket referred to by the file descriptor sockfd to the address specified by addr. Serverâ€™s address and port is specified in addr.

